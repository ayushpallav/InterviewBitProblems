bool myComp(pair<int,int> a,pair<int,int> b)
{
    if(a.first==b.first)
        return a.second < b.second;
    return a.first < b.first;   
}
int Solution::candy(vector<int> &A) 
{
    int pos,n = A.size();
    vector<pair<int,int>> v;
    for(int i=0;i<n;i++)
        v.push_back(make_pair(A[i],i));
    sort(v.begin(),v.end(),myComp);
    vector<int> candies(n,1);
    int ans=0;
    for(int i=0;i<v.size();i++)
    {
        pos = v[i].second;
        if(pos<n-1 && pos>0)
        {
            if(A[pos+1]<A[pos] && A[pos-1]<A[pos])
                candies[pos] = max(candies[pos-1],candies[pos+1])+1;
            else if(A[pos+1]<A[pos])
                candies[pos] = candies[pos+1] + 1;
            else if(A[pos-1]<A[pos])
                candies[pos] = candies[pos-1] + 1;
        }
        else if(pos<n-1 && A[pos+1]<A[pos])
            candies[pos] = 1 + candies[pos+1];
        else if(pos>0 && A[pos-1]<A[pos])
            candies[pos] = 1 + candies[pos-1];
        ans += candies[pos];
    }
    /*for(int i=0;i<n;i++)
        cout<<candies[i]<<" ";
    cout<<endl;*/
    return ans;
}
